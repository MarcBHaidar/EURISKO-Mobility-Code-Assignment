EURISKO Mobility Node JS Code Assignment

This project consists of a note taking app using Nodejs, MongoDb and PostMan which interacts with the User on different levels such as creating a user by signing-up and then
logging-in to access the notes that uses CRUD operations and each note has its own categorie which also has CRUD operations, all the data sent by the users are saved on
a database using the Mongoose and MongoDb packages.

The app.js file is the main starting point of the project where the connection to the database is done by getting the url of the connection from mongoDb which runs on 
port (8080), all the connection happens using packages, routes, models and controller.

Starting by the Authentication, we have the auth route that contains the signUp and Login. These 2 have a model which makes the schema that is printed in the database
when the user sends the data. Using postman, (http://localhost:8080/auth/signup) uses a PUT method and requires ("email","password" and "name") that are defined in the
controllers folder inside the authController, takes the data submitted by the user and sends them to the database, however the password uses the hash method which stores
it in a hashed way is hard to decrypt. Same for the login phase (http://localhost:8080/auth/login) and uses a POST method that only requires ("email" and "password"),
when logged in, a token is generated that expires in 1 hour which means that a User has to re-login after an hour to get access to CRUD operations of notes and categories

A User should create a categorie before creating a note that uses a POST method (http://localhost:8080/categories/newCategorie) and requires ("title") and the creator ID 
is fetched from the logged in user. This created categorie can have many functions such as getting all the categories that are in the database which uses a GET method
(http://localhost:8080/categories/allCategories), on the other hand a single categorie can be fetched using its own categorie ID generated when created which uses also a
GET method (http://localhost:8080/categories/categorie/ +categorieId), these categories can be edited and updated which requires the same parameters for creating a new 
categorie and uses a PUT method (http://localhost:8080/categories/categorie/ +categorieId) the data sent will be saved and sent to the database. Finally these databases 
can be deleted using a DELETE method (http://localhost:8080/categories.categorie/ +categorieId) however when deleting a categorie all related notes to this categorie
title are also deleted from the database.

After creating a categorie, the user is able to use the CRUD operations for the note such as creating a note using POST method (http://localhost:8080/notes/post) that 
requires ("title","content","category (same as the categorie created)", "tags (can be an array of multiple tags)" (the creator is fetched form the user ID and a timezone
is added when created)) which are defined in the controllers folder inside notesController, createNotes. These created notes can also have the same functions as categories
such as getting all notes from the database using a GET method (http:/localhost:8080/notes/posts), also a single note can be fetched using the note id which is also GET method 
(http://localhost:8080/notes/post/ +postId), these notes can be edited and updated in the database which requires the same parameters for creating a new note, uses 
PUT method (http://localhost:8080/notes/post/ +postId). At the end any note can be deleted using the postId by DELETE method (http://localhost:8080/notes/post +postID)

All the features such as signup, login, CRUD categories and notes are authenticated using a middleware function (isAuth) which is required in all routes before any code 
gets executed, the user must signup and login before accessing all these features, this function also checks if the user is authenticated to use these function and also 
checks if the user who created the note or the category can only be able to edit or delete his note by checking if the note or category User Id is the same as the user
who is trying to do this operation
